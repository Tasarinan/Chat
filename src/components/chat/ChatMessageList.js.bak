import React, { Component } from 'react';
import ChatMessage from './ChatMessage'
import { inject, observer } from 'mobx-react';

import SpringScrollbars from '../common/scrollbar/SpringScrollbars';
import GroupMemberModal from './GroupMemberModal';

import { Spin } from 'antd';

import $ from 'jquery';
import { MessageTypes } from '../../common/types';

@inject(stores => ({
  contactStore: stores.contactStore,
  chatStore: stores.chatStore,
}))
@observer
export default class ChatMessageList extends Component {

  $scrollbar = null;

  constructor(props) {
    super(props);

    this.state = {
      oldListHeight: 0,
      totalNewMsg: 0,  // 统计有多少条新消息
    };

    // 滚动栏之前的高度
    this.height = 0;

    // 之前的读取的消息的位置
    this.oldHistoryPosition = 0;

    // 滚动条当前的高度
    this.scrollNowHeight = 0;

    // 滚动条滚动到最底的高度
    this.scrollToBottomHeight = 0;

    // 是否滑到最底
    this.bottomFlag = false;

    // 加载历史记录的flag
    this.historyFlag = false;

    // 当加载还在ing的时候 人为又滚动的记录
    this.loadingScroll = 0;

    // 是否为网络加载的标记
    this.netWork = false;
  }

  componentDidMount() {
    const {
      currentChatPerson
    } = this.props;

    if (currentChatPerson && currentChatPerson.id) {
      this.scrollToBottom();
      this.height = this.$scrollbar.getScrollHeight();

      this.bottomFlag = true;
    }
  }

  componentWillReceiveProps(nextProps) {
    console.log('[chat message list] - componentWillReceiveProps', nextProps);

    const {
      currentChatPerson: nextCurrentChatPerson,
    } = nextProps;

    const {
      currentChatPerson,
    } = this.props;

    // 获取了新的分页信息，要调整滚动条
    if (nextCurrentChatPerson.lastTime < currentChatPerson.lastTime) {
      this.setState({
        oldListHeight: this.$scrollbar.getScrollHeight()
      });

      return;
    }
  }

  shouldComponentUpdate(nextProps) {
    // const {
    //   messages,
    //   currentChatPerson,
    // } = this.props;

    // const {
    //   messages: newMessages,
    //   currentChatPerson: newPerson,
    // } = nextProps;

    // 过滤出不是自己的信息
    // const msg = messages.filter(item => !item.inputFlag);
    // const newMsg = newMessages.filter(item => !item.inputFlag);
    
    // 新信息比原来的信息少，才会 < 0
    // const length = newMsg.length - msg.length;
    // if (length < 0 && currentChatPerson.id === newPerson.id) {
    //   // 同一个人，但是消息少了 ？？？
    //   const lastMsg = newMessages[ newMessages.length - 1 ];
    //   if (lastMsg.objectName === MessageTypes.text) {
    //     return false;
    //   }
    // }

    // const {
    //   reHistoryMsgFlag,
    // } = this.props.chatStore;

    // 当 local 还没加载的时候，不刷页面
    // if (newPerson.historyLoading) {
    //   if (!reHistoryMsgFlag) {
    //     return false
    //   }
    //   return true
    // }

    return true;
  }

  /**
   * 
   * 组件更新
   * 
   * @param {*} prevProps 
   * @param {*} prevState 
   */
  componentDidUpdate(prevProps, prevState) {
    console.log('[chat message list] - componentDidUpdate', prevProps, this.props);

    const {
      messages: oldMessages,
      currentChatPerson: oldPerson,
    } = prevProps;

    const {
      messages,
      currentChatPerson,
      isJustLoadHistory,
    } = this.props;

    const {
      historyMessagePosition,
      localHistoryMsgFlag,
      setLocalHistoryMsgFlag,
    } = this.props.chatStore;

    const imgMsgLength = messages.filter(item => item.objectName === MessageTypes.img).length;


    // 新的一条消息
    if (historyMessagePosition - this.oldHistoryPosition === 1) {
      this.netWork = false;
      const item = messages[ messages.length - 1 ];
      if (item && item.inputFlag) { // 自己chatInput发出的消息
        if (item.objectName !== MessageTypes.img) { // 发出的信息不是图片信息
          this.scrollToBottom();
          this.bottomFlag = true;
          this.setState({
            totalNewMsg: 0,
          });

          this.scrollToBottomHeight = this.$scrollbar.getScrollTop();
          this.scrollNowHeight = this.$scrollbar.getScrollHeight();
        }
      } else { // 不是自己发出的消息
        // 在最底下，则自动下滑
        if (this.bottomFlag) {
          this.scrollToBottom();
          this.scrollToBottomHeight = this.$scrollbar.getScrollTop();
          this.scrollNowHeight = this.$scrollbar.getScrollHeight();
        } else { // 不在最底下,停留在当前位置
          this.setState({
            totalNewMsg: this.state.totalNewMsg + 1,
          });

          this.scrollToBottomHeight += (this.$scrollbar.getScrollHeight() - this.scrollNowHeight);
          this.scrollNowHeight = this.$scrollbar.getScrollHeight();
        }
      }

      this.oldHistoryPosition = historyMessagePosition;
      return;
    }

    this.oldHistoryPosition = historyMessagePosition;

    if (oldMessages.length === 0 // 初次加载，滚动条滚到最下方，若换人，list没数据也会进入到这里
        || currentChatPerson.id !== oldPerson.id) { // 换人
      // 第一次滑到最下，这里有可能图片还未加载完
      this.scrollToBottom();

      setTimeout(() => {
        this.scrollToBottom(); // 当图片加载完，再滑动一次
        this.bottomFlag = true;

        this.height = this.$scrollbar.getScrollHeight();
        this.scrollNowHeight = this.$scrollbar.getScrollHeight();
        this.scrollToBottomHeight = this.$scrollbar.getScrollTop();
      }, 50);

      return;
    }

    if (messages.length > oldMessages.length) {
      
    }

    const msg = messages.filter(item => !item.inputFlag);
    const oldMsg = oldMessages.filter(item => !item.inputFlag);
    const length = msg.length - oldMessages.length;

    // 既然都走到这了，只剩下每次加载历史记录（length 为网络加载）（ localHistoryMsgFlag 为本地加载判断）
    if (!currentChatPerson.historyLoading && (length > 0 || localHistoryMsgFlag)) {
      if (this.height) {
        let scrollH = this.$scrollbar.getScrollHeight();
        // 网络加载
        if (length > 0) {
          this.netWork = true;
          scrollH = this.$scrollbar.getScrollHeight() - this.height - 36; // 36为spin的高度
        }
        
        // 本地加载
        if (localHistoryMsgFlag) {
          setLocalHistoryMsgFlag(false);
          scrollH = this.$scrollbar.getScrollHeight() - this.height;
        }
        
        // 加载是loading还存在的情况下 滚动的值
        if (this.loadingScroll && this.loadingScroll > 0) {
          scrollH += this.loadingScroll + 1; // 1为偏差值
        }
        
        // 若历史加载有图片，且为服务器加载
        if (imgMsgLength > 0 && (length > 0 || localHistoryMsgFlag)) {
          this.$scrollbar.scrollTo(scrollH);
        } else {
          this.$scrollbar.scrollTo(scrollH);
          this.height = this.$scrollbar.getScrollHeight();
        }
      } else {
        this.height = this.$scrollbar.getScrollHeight();
      }
    }

    // 消息列表数量没有变，但是消息列表的内容变了，比如 hasRead
    if (!currentChatPerson.historyLoading
      && isJustLoadHistory
      && messages.length > 0) {
      // 加载了历史 不管怎么样都要发送已读
      // 而且是批量的
      this.props.chatStore.batchSendHasRead(messages, currentChatPerson.id);
      this.props.chatStore.setIsJustLoadHistory(false);
    }
  }

  handleImageLoaded = msg => {
    const {
      localHistoryMsgFlag,
    } = this.props.chatStore;

    // 发送图片的时候为本地加载
    if (msg.local) {
      this.scrollToBottom();
      this.height = this.$scrollbar.getScrollHeight();
      this.bottomFlag = true;
      this.setState({
        totalNewMsg: 0,
      });
      this.scrollToBottomHeight = this.$scrollbar.getScrollTop();
      this.scrollNowHeight = this.$scrollbar.getScrollHeight();

      return;
    }

    let scrollH = 0;
    if (this.$scrollbar.getScrollHeight() > this.height) {
      if (localHistoryMsgFlag) {
        scrollH = this.$scrollbar.getScrollHeight() - this.height;     
      } else {
        if (this.netWork) {
          scrollH = this.$scrollbar.getScrollHeight() - this.height - 36;
        }
      }

      if (this.loadingScroll && this.loadingScroll > 0) {
        scrollH += this.loadingScroll + 1; // 1为偏差值
      }

      if (this.netWork) {
        this.$scrollbar.scrollTo(scrollH);
      } else {
        if (this.bottomFlag) {
          this.scrollToBottom();
        }
      }

      this.height = this.$scrollbar.getScrollHeight();
    }
  };

  handleMLWheel = (event) => {
    const { currentChatPerson } = this.props;
    if (currentChatPerson.historyLoading && this.historyFlag) {
      this.historyFlag = false;
      return;
    }
    
    let scrollTop = this.$scrollbar.getScrollTop();
    if (currentChatPerson.historyLoading) {
      this.loadingScroll = scrollTop;
    }
    
    // 没有滚到底，要显示计数小气泡
    if (scrollTop >= (this.scrollToBottomHeight - 10)) {
      this.bottomFlag = true;
      this.setState({
        totalNewMsg: 0
      });
    } else {
      this.bottomFlag = false;
    }
    
    const { deltaY } = event;
    if (deltaY < 0 // 向上滚动
      && scrollTop < 100
      && !currentChatPerson.historyLoading
      && currentChatPerson.historyHasMore) {
      // 显示 loading
      this.historyFlag = true;
      
      // 加载历史消息（服务器历史消息，本地历史消息）
      const { fetchHistoryByPage } = this.props.chatStore;
      fetchHistoryByPage(currentChatPerson);
    }
  };

  scrollToTop = () => {
    this.$scrollbar && this.$scrollbar.scrollToTop();
  };

  scrollToBottom = () => {
    this.$scrollbar && this.$scrollbar.scrollToBottom();
  };

  /**
   * 确认开始转发信息
   */
  handleMessageRedirectSubmit = (values, memberList, checkedUsers) => {
    // console.log('before redirect:', memberList, checkedUsers);
    this.props.chatStore.redirectMsgs(checkedUsers);
  };

  handleMessageRedirectCancel = () => {
    this.props.chatStore.closeRedirectMsgModal();
  };

  handleNewMsg = () => {
    this.scrollToBottom();
    this.bottomFlag = true;
    this.setState({
      totalNewMsg: 0,
    });
  }

  renderMessages(messages = []) {
    let lastMessage = null;

    return messages.map((item, index) => {
      const ret = (
        <ChatMessage
          key={item.id}
          index={index}
          message={item}
          onImgLoaded={this.handleImageLoaded}
          messages={messages}
          lastMessage={lastMessage}
        />
      );

      lastMessage = item;
      return ret;
    });
  }

  render() {
    const {
      messages,
      currentChatPerson
    } = this.props;

    const {
      redirectMsgModalVisible,
      redirectMsgModalLoading,
    } = this.props.chatStore;

    const {
      companysTreeData,
      companyExpandedKeys
    } = this.props.contactStore;

    const comOptions = {
      data: companysTreeData,
      openKeys: companyExpandedKeys
    };

    const {
      totalNewMsg,
    } = this.state;

    // 如果 loading 就不 render
    const allMessages = !currentChatPerson.historyLoading 
      ? this.renderMessages(messages)
      : null;

    // const allMessages = this.renderMessages(messages);

    return (
      <div
        className="chat-chat-message-list"
        style={{
          bottom: this.props.bottom
        }}
      >
        <SpringScrollbars
          style={{ height: '100%' }}
          onWheel={this.handleMLWheel}
          ref={el => this.$scrollbar = el}
        >
          {
            currentChatPerson.historyLoading
              || (!currentChatPerson.historyHasMore && !currentChatPerson.historyLoading)
            ? (
              <div className='message-loading-more'>
                {
                  currentChatPerson.historyLoading 
                    ? <Spin />
                    : !currentChatPerson.historyHasMore ? <div className='no-more-data'>没有更多消息了</div> : null
                }
              </div>
            ) : null
          }

          {allMessages}
          <audio id="chat-message-audio">不支持 audio 标签</audio>
        </SpringScrollbars>

        {totalNewMsg > 0 && <div className='tip-new-msg' onClick={this.handleNewMsg}>{totalNewMsg}</div>}

        {
          redirectMsgModalVisible ?
            <GroupMemberModal
              title="转发"
              maxCount={100}
              mode="redirect"
              showForm={false}
              comTreeOptions={comOptions}
              visible={redirectMsgModalVisible}
              formLoading={redirectMsgModalLoading}
              onSubmit={this.handleMessageRedirectSubmit}
              onCancel={this.handleMessageRedirectCancel}
            /> : null
        }
      </div>
    );
  }

}

ChatMessageList.defaultProps = {
  messages: [],
  bottom: 120,
  currentChatPerson: {},
};

